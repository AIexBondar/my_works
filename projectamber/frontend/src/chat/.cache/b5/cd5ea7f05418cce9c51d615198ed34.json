{"id":"routes.js","dependencies":[{"name":"C:\\Users\\Alex\\Desktop\\amber\\projectamber\\frontend\\src\\chat\\.babelrc","includedInParent":true,"mtime":1594633667394},{"name":"C:\\Users\\Alex\\Desktop\\amber\\projectamber\\frontend\\src\\chat\\package.json","includedInParent":true,"mtime":1596109370009},{"name":"react","loc":{"line":1,"column":18},"parent":"C:\\Users\\Alex\\Desktop\\amber\\projectamber\\frontend\\src\\chat\\routes.js","resolved":"C:\\Users\\Alex\\Desktop\\amber\\projectamber\\frontend\\src\\chat\\node_modules\\react\\index.js"},{"name":"react-router-dom","loc":{"line":2,"column":22},"parent":"C:\\Users\\Alex\\Desktop\\amber\\projectamber\\frontend\\src\\chat\\routes.js","resolved":"C:\\Users\\Alex\\Desktop\\amber\\projectamber\\frontend\\src\\chat\\node_modules\\react-router-dom\\esm\\react-router-dom.js"},{"name":"./hoc/hoc","loc":{"line":3,"column":16},"parent":"C:\\Users\\Alex\\Desktop\\amber\\projectamber\\frontend\\src\\chat\\routes.js","resolved":"C:\\Users\\Alex\\Desktop\\amber\\projectamber\\frontend\\src\\chat\\hoc\\hoc.js"},{"name":"./containers/Chat","loc":{"line":5,"column":17},"parent":"C:\\Users\\Alex\\Desktop\\amber\\projectamber\\frontend\\src\\chat\\routes.js","resolved":"C:\\Users\\Alex\\Desktop\\amber\\projectamber\\frontend\\src\\chat\\containers\\Chat.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactRouterDom = require(\"react-router-dom\");\n\nvar _hoc = _interopRequireDefault(require(\"./hoc/hoc\"));\n\nvar _Chat = _interopRequireDefault(require(\"./containers/Chat\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n    Каждый Router создает объект history \n  который хранит путь к текущему location[1] и \n  перерисовывает интерфейс сайта когда происходят \n  какие то изменения пути.\n\n  <Route/> компонент это главный строительный блок React Router'а. \n  В том случае если вам нужно рендерить элемент в зависимости от pathname URL'ов, то следует использовать компонент <Route/>\n\n  <Route /> принимает path в виде prop который описывает определенный путь и сопоставляется с location.pathname. \n\n  Когда location.pathname это '/', prop path не совпадает\n  Когда location.pathname это '/roster' или '/roster/2', prop path совпадает\n  Если установлен exact prop. Совпадает только строгое сравнение '/roster', но не\n  '/roster/2'\n\n  component — React компонент. Когда роут удовлетворяется сопоставление в path, \n  то он возвращает переданный component (используя функцию React.createElement).\n*/\nvar BaseRouter = function BaseRouter() {\n  return /*#__PURE__*/_react.default.createElement(_hoc.default, null, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Route, {\n    exact: true,\n    path: \"/:chatID/\",\n    component: _Chat.default\n  }));\n};\n\nvar _default = BaseRouter;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"routes.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"routes.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"routes.js","original":{"line":3,"column":0}},{"generated":{"line":14,"column":0},"source":"routes.js","original":{"line":5,"column":0}},{"generated":{"line":18,"column":0},"source":"routes.js","original":{"line":7,"column":0}},{"generated":{"line":37,"column":0},"source":"routes.js","original":{"line":27,"column":0}},{"name":"BaseRouter","generated":{"line":37,"column":4},"source":"routes.js","original":{"line":27,"column":6}},{"generated":{"line":37,"column":14},"source":"routes.js","original":{"line":27,"column":16}},{"generated":{"line":37,"column":17},"source":"routes.js","original":{"line":27,"column":19}},{"name":"BaseRouter","generated":{"line":37,"column":26},"source":"routes.js","original":{"line":27,"column":6}},{"generated":{"line":37,"column":36},"source":"routes.js","original":{"line":27,"column":19}},{"generated":{"line":38,"column":0},"source":"routes.js","original":{"line":27,"column":19}},{"generated":{"line":38,"column":22},"source":"routes.js","original":{"line":28,"column":2}},{"generated":{"line":38,"column":51},"source":"routes.js","original":{"line":28,"column":3}},{"generated":{"line":38,"column":63},"source":"routes.js","original":{"line":28,"column":2}},{"generated":{"line":38,"column":84},"source":"routes.js","original":{"line":29,"column":4}},{"generated":{"line":38,"column":113},"source":"routes.js","original":{"line":29,"column":5}},{"generated":{"line":38,"column":134},"source":"routes.js","original":{"line":29,"column":4}},{"generated":{"line":39,"column":0},"source":"routes.js","original":{"line":29,"column":11}},{"generated":{"line":39,"column":4},"source":"routes.js","original":{"line":29,"column":11}},{"generated":{"line":39,"column":9},"source":"routes.js","original":{"line":29,"column":16}},{"generated":{"line":39,"column":15},"source":"routes.js","original":{"line":29,"column":4}},{"generated":{"line":40,"column":0},"source":"routes.js","original":{"line":29,"column":17}},{"generated":{"line":40,"column":4},"source":"routes.js","original":{"line":29,"column":17}},{"generated":{"line":40,"column":8},"source":"routes.js","original":{"line":29,"column":21}},{"generated":{"line":40,"column":10},"source":"routes.js","original":{"line":29,"column":22}},{"generated":{"line":40,"column":21},"source":"routes.js","original":{"line":29,"column":4}},{"generated":{"line":41,"column":0},"source":"routes.js","original":{"line":29,"column":34}},{"generated":{"line":41,"column":4},"source":"routes.js","original":{"line":29,"column":34}},{"generated":{"line":41,"column":13},"source":"routes.js","original":{"line":29,"column":43}},{"name":"Chat","generated":{"line":41,"column":15},"source":"routes.js","original":{"line":29,"column":45}},{"generated":{"line":42,"column":0},"source":"routes.js","original":{"line":29,"column":4}},{"generated":{"line":42,"column":4},"source":"routes.js","original":{"line":28,"column":2}},{"generated":{"line":42,"column":5},"source":"routes.js","original":{"line":27,"column":19}},{"generated":{"line":43,"column":0},"source":"routes.js","original":{"line":27,"column":19}},{"generated":{"line":43,"column":1},"source":"routes.js","original":{"line":27,"column":0}},{"name":"BaseRouter","generated":{"line":45,"column":15},"source":"routes.js","original":{"line":33,"column":15}}],"sources":{"routes.js":"import React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Hoc from './hoc/hoc';\n\nimport Chat from \"./containers/Chat\";\n\n/*\n    Каждый Router создает объект history \n  который хранит путь к текущему location[1] и \n  перерисовывает интерфейс сайта когда происходят \n  какие то изменения пути.\n\n  <Route/> компонент это главный строительный блок React Router'а. \n  В том случае если вам нужно рендерить элемент в зависимости от pathname URL'ов, то следует использовать компонент <Route/>\n\n  <Route /> принимает path в виде prop который описывает определенный путь и сопоставляется с location.pathname. \n\n  Когда location.pathname это '/', prop path не совпадает\n  Когда location.pathname это '/roster' или '/roster/2', prop path совпадает\n  Если установлен exact prop. Совпадает только строгое сравнение '/roster', но не\n  '/roster/2'\n\n  component — React компонент. Когда роут удовлетворяется сопоставление в path, \n  то он возвращает переданный component (используя функцию React.createElement).\n*/\n\nconst BaseRouter = () => (\n  <Hoc>\n    <Route exact path=\"/:chatID/\" component={Chat} />\n  </Hoc>\n);\n\nexport default BaseRouter;\n"},"lineCount":null}},"error":null,"hash":"4ecce9d49f520026030595546fe20293","cacheData":{"env":{}}}